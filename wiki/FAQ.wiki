#summary FAQ - Frequently Asked Questions
#labels Featured

===Why yet another logging package?===
There are several logging packages available for PL/SQL.  I've used LOG4PLSQL on several projects in the past.  This is a good logging package, but can be verbose to use, and several developers found it confusing.  The Java listener is a great approach to extend the messages to log4j.  However, this uses DBMS pipes for propagation of the messages.  Problems with this approach is the pipe buffer can fill up and cause an exception, and in a RAC environment, you need one Java listener per RAC node.

We started the log4ora package to leverage good concepts from other logging packages, create an easy to use API, fully leverage features in 11g, and provide an enterprise class logging solution.


===I have my own logging package which writes to a table.  Why use this?=== 
We've seen several home-grown logging packages.  Typically, they do not support the concept of log levels and often have no alerting capabilities. Another difficulty is access to the log table itself.  With compliance for regulations such as PCI, SAS-70, or SOX, the application development team may not have access to the production database.

Log4ora was written to leverage JMS (via AQ) and log4J.  This creates a more open standard for message consumers to use.  For example, the application development team may wish to have the messages written to a log file.  This is a simple configuration option in log4j.  Or the operations team may wish to receive alerts via Splunk on all ERROR or FATAL messages.  Again, there would be several ways to configure this.  By using the JMS standard and providing a log4j message client, enterprises using log4ora will have many options on how to consume the log messages. 


===Will adding logging affect the performance of my application?===  
Yes, there is always an associated overhead to logging.  This applies to any logging implementation.  Log4Ora will first check to see if the log level is enabled, and if so, then generate the log message and write it to AQ.  This allows you to have more verbose logging in development, and then just log critical events in production. 

The generation of a log message is roughly the same cost as an insert into a table. Control of the your application process is returned once the message is on the AQ queue.  Your application process does not incur the cost of propagating the message to subscribers. This is handled by Oracle internally.  Naturally, the over all system incurs a cost, but the application thread does not. 

